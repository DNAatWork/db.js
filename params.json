{"name":"db.js","body":"db.js\r\n=====\r\n\r\ndb.js is a wrapper for [IndexedDB](http://www.w3.org/TR/IndexedDB/) to make it easier to work against, making it look more like a queryable API than the traditional IndexedDB API.\r\n\r\nUsage\r\n====\r\n\r\nAdd a reference to db.js in your application before you want to use IndexedDB:\r\n\r\n\t<script src='/scripts/db.js'></script>\r\n\t\r\nOnce you have the script included you can then open connections to each different database within your application:\r\n\r\n\tvar server;\r\n\tdb.open({\r\n             server: 'my-app',\r\n             version: 1,\r\n             done: function ( s ) {\r\n                 server = s;\r\n             }, {\r\n                 people: {\r\n                     key: { keyPath: 'id' , autoIncrement: true }\r\n                 }\r\n             }\r\n        });\r\n\t\r\nA connection is intended to be persisted and you can perform multiple operations while it's kept open. Check out the `/tests/public/spec` folder for more examples.\r\n\r\n## Adding items\r\n\r\n\tserver.people.add( {\r\n\t\tfirstName: 'Aaron',\r\n\t\tlastName: 'Powell'\r\n\t} , function ( item ) {\r\n\t\t//item stored\r\n\t});\r\n\t\r\n## Removing\r\n\r\n\tserver.people.remove( 1 , function ( item ) {\r\n\t\t//item stored\r\n\t});\r\n\r\n## Querying\r\n\r\n\tserver.people.query( 'firstName' , 'Aaron' )\r\n            .execute( function ( results ) {\r\n                //do something with the results\r\n            });\r\n\r\n# License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2012 Aaron Powell","tagline":"db.js is a wrapper for IndexedDB to make it easier to work against","google":"UA-20152461-5","note":"Don't delete this file! It's used internally to help with page regeneration."}